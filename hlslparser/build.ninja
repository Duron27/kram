
# Note: need absolute paths for Xcode for error/warning clickthrough
# ugh that ninja doesn't have path or wildcard support.
# but coding by hand for now is better than dealing with cmake ninja

# some handy commands
# ninja -t clean
# ninja -t rules -d
# ninja -t targets

# ninja_required_version = 1.5
# include rules.ninja


homeDir = /Users/Alec/devref/

vulkanSDK = ${homeDir}vulkansdk/1.3.239.0/macOS/bin/
projectDir = ${homeDir}kram/hlslparser/
appBuildDir = ${projectDir}/build/hlslparser/Build/Products/Release/

hlslparser = ${appBuildDir}hlslparser

# this is annoying that ninja doesn't cache app modstamps
#rule cleanBuild
#    command = ninja -t clean
#    description = Clean Build

# this doesn't have anything to compare, need app timestamps
# also couldn't add to dependsMSL or dependsHLSL
#build clean: cleanBuild | ${hlslparser}

#------

metalCompile = xcrun -sdk macosx metal
metalLib = xcrun -sdk macosx metallib
metalLibStrip = xcrun -sdk macosx metal-dsymutil

# src files
srcDir = ${projectDir}shaders/

# headers and parser gen shaders
#intDir = ${projectDir}outshaders/

# compiled shader per platform
# 2.4 is first version to support companion sym
dstDir = ${projectDir}out/mac/
flagsMSL = -std=macos-metal2.4 -Werror -I ${srcDir}

dependsMSL = ${srcDir}ShaderMSL.h

# for iOS
#dstDir = ${projectDir}out/ios/
#flagsMSL = -std=ios-metal2.4 -Werror

# turn on file/line directives to jump back to original sources
# and turn on comments in generated sources
flagsParser = -g -line
#flagsParser = -g

# turn on debug, makes metallib 3x bigger and not optimized
#flagsMSLDebug = -g

# this allows Xcode to load the sym file, don't use with 2.3, or the file is giant.
flagsMSLDebug = -frecord-sources
# flagsMSLDebug =

# hlslparser msl codegen
rule genMSL
    command = $hlslparser $flagsParser -i $in -o $out
    description = Gen MSL
    
# compile to .air
rule compileMSL
    command = $metalCompile $flagsMSLDebug $flagsMSL -c $in -o $out
    description = Gen Air
        
# https://developer.apple.com/documentation/metal/shader_libraries/compiling_shader_code_into_a_library_with_metal_s_command-line_tools?language=objc
# linker to metallib
rule linkMSL
    command = $metalLib -o $out $in
    description = Link metallib
    
# strip metallib and gen metlalibsym (only for SM2.4+)
rule stripMSL
    command = $metalLibStrip -flat -remove-source $in
    description = Gen metallibsym
    

# gen air
build ${dstDir}Skinning.metal: genMSL ${srcDir}Skinning.hlsl | ${dependsMSL}
build ${dstDir}Sample.metal: genMSL ${srcDir}Sample.hlsl | ${dependsMSL}
build ${dstDir}Compute.metal: genMSL ${srcDir}Compute.hlsl | ${dependsMSL}

# this avoids recompilation when there are a lot of files
# but it does mean more compile calls to gen the one metallib and sym
build ${dstDir}Skinning.air: compileMSL ${dstDir}Skinning.metal
build ${dstDir}Sample.air: compileMSL ${dstDir}Sample.metal
build ${dstDir}Compute.air: compileMSL ${dstDir}Compute.metal

# gen metallib (87K)
build ${dstDir}GameShaders.metallib: linkMSL ${dstDir}Skinning.air ${dstDir}Sample.air ${dstDir}Compute.air

# this is getting run every time since it strips the metallib, how to prevent that
# also can compile all metal files into both metallib and dsycm
# this also doesn't make metallib any smaller, but is supposed to strip it
# goes from 299K down to 273K, but seems like it should go smaller
# with no debug flags, 87K and sym is 80K w/o debug, prob should skip gen of sym file
# if not in debug

# sources are still embedded in the 87K version

# gen metallibsym
build ${dstDir}GameShaders.metallibsym: stripMSL ${dstDir}GameShaders.metallib

#-------

dxc = ${vulkanSDK}dxc

dependsHLSL = ${srcDir}ShaderHLSL.h
dstDirHLSL = ${projectDir}out/android/

# turn on debug
# flagsDXDebug = -Zi
flagsDXDebug =

flagsDXC = -nologo -Zpc -enable-16bit-types -HV 2021 -Werror -fspv-extension=SPV_KHR_shader_draw_parameters -spirv -fspv-target-env=vulkan1.2 -I ${srcDir}

flagsVS = -T vs_6_2
flagsPS = -T ps_6_2
flagsCS = -T cs_6_2

# hlslparser hlsl/msl codegen
rule genHLSL
    command = $hlslparser $flagsParser -i $in -o $out
    description = Gen HLSL
    
# this will get shadow replaced
entryPoint = Foo

# compile to spirv
rule compileVS
    command = $dxc $flagsDXC $flagsVS -E ${entryPoint}VS -Fo $out $in
    description = Gen spirv VS
    
rule compilePS
    command = $dxc $flagsDXC $flagsPS -E ${entryPoint}PS -Fo $out $in
    description = Gen spirv PS
        
rule compileCS
    command = $dxc $flagsDXC $flagsCS -E ${entryPoint}CS -Fo $out $in
    description = Gen spirv CS
   
rule archiveSpriv
    command = zip -r $out $in
    description = Gen Archive
   
# gen hlsl
build ${dstDirHLSL}Skinning.hlsl: genHLSL ${srcDir}Skinning.hlsl | ${dependsHLSL}
build ${dstDirHLSL}Sample.hlsl: genHLSL ${srcDir}Sample.hlsl | ${dependsHLSL}
build ${dstDirHLSL}Compute.hlsl: genHLSL ${srcDir}Compute.hlsl | ${dependsHLSL}

# gen spv
build ${dstDirHLSL}Skinning.vert.spv: compileVS ${dstDirHLSL}Skinning.hlsl
    entryPoint = Skinning
build ${dstDirHLSL}Skinning.frag.spv: compilePS ${dstDirHLSL}Skinning.hlsl
    entryPoint = Skinning
        
build ${dstDirHLSL}Sample.vert.spv: compileVS ${dstDirHLSL}Sample.hlsl
    entryPoint = Sample
build ${dstDirHLSL}Sample.frag.spv: compilePS ${dstDirHLSL}Sample.hlsl
    entryPoint = Sample
    
build ${dstDirHLSL}Compute.comp.spv: compileCS ${dstDirHLSL}Compute.hlsl
    entryPoint = Compute

# zip spv to single archive (6k)
build ${dstDirHLSL}GameShaders.zip: archiveSpriv ${dstDirHLSL}Skinning.vert.spv ${dstDirHLSL}Skinning.frag.spv ${dstDirHLSL}Sample.vert.spv ${dstDirHLSL}Sample.frag.spv ${dstDirHLSL}Compute.comp.spv


