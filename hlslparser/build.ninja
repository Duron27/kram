

vulkanSDK=/Users/Alec/devref/vulkansdk/1.3.239.0/macOS/bin/
projectDir=/Users/Alec/devref/kram/hlslparser/
appBuildDir =./build/hlslparser/Build/Products/Release/

hlslparser = ${appBuildDir}hlslparser

#------

metalCompile = xcrun -sdk macosx metal
metalLib = xcrun -sdk macosx metallib

# src files
srcDir = ${projectDir}shaders/

# headers and parser gen shaders
intDir = ${projectDir}outshaders/

# compiled shader per platform
dstDir = ${projectDir}out/mac/


flagsParser = -g

# this is setup for .air file and metallibdsym creation
flagsMSL = -g -frecord-sources=flat -std=macos-metal2.3

# for iOS
# -std=ios-metal2.3
    
# hlslparser msl codegen
rule genMSL
    command = $hlslparser $flagsParser -i $in -o $out

# compile to .air
rule compileMSL
    command = $metalCompile $flagsMSL -c $in -o $out

# https://developer.apple.com/documentation/metal/shader_libraries/compiling_shader_code_into_a_library_with_metal_s_command-line_tools?language=objc
# linker to metallib
rule linkMSL
    command = $metalLib -o $out $in

dependsMSL = ${intDir}/ShaderMSL.h

# need correct dir
# gen air
build ${intDir}Skinning.metal: genMSL ${srcDir}Skinning.hlsl | ${dependsMSL}
build ${intDir}Sample.metal: genMSL ${srcDir}Sample.hlsl | ${dependsMSL}
build ${intDir}Compute.metal: genMSL ${srcDir}Compute.hlsl | ${dependsMSL}

build ${dstDir}Skinning.air: compileMSL ${intDir}Skinning.metal
build ${dstDir}Sample.air: compileMSL ${intDir}Sample.metal
build ${dstDir}Compute.air: compileMSL ${intDir}Compute.metal

# can ninja take file list?
build ${dstDir}Game.metallib: linkMSL ${dstDir}Skinning.air ${dstDir}Sample.air ${dstDir}Compute.air

#-------

dxc = ${vulkanSDK}dxc

flagsDXC = -nologo -Zi -Zpc -enable-16bit-types -HV 2021 -fspv-extension=SPV_KHR_shader_draw_parameters -spirv -fspv-target-env=vulkan1.2

flagsVS = -T vs_6_2
flagsPS = -T ps_6_2
flagsCS = -T cs_6_2

dependsHLSL = ${intDir}/ShaderHLSL.h

dstDirHLSL = ${projectDir}out/android/

# hlslparser hlsl/msl codegen
rule genHLSL
  command = $hlslparser $flagsParser -i $in -o $out

# this will get shadow replaced
entryPoint = Foo

# compile to dxil or spriv
# TODO: fix src/dstDir
rule compileVS
  command = $dxc $flagsDXC $flagsVS -E ${entryPoint}VS -Fo $out $in
rule compilePS
  command = $dxc $flagsDXC $flagsPS -E ${entryPoint}PS -Fo $out $in
rule compileCS
  command = $dxc $flagsDXC $flagsCS -E ${entryPoint}CS -Fo $out $in

# gen hlsl
build ${intDir}Skinning.hlsl: genHLSL ${srcDir}Skinning.hlsl | ${dependsHLSL}
build ${intDir}Sample.hlsl: genHLSL ${srcDir}Sample.hlsl | ${dependsHLSL}
build ${intDir}Compute.hlsl: genHLSL ${srcDir}Compute.hlsl | ${dependsHLSL}

# compile hlsl
build ${dstDirHLSL}Skinning.vert.spv: compileVS ${intDir}Skinning.hlsl
    entryPoint = Skinning
    
build ${dstDirHLSL}Skinning.frag.spv: compilePS ${intDir}Skinning.hlsl
    entryPoint = Skinning
        
build ${dstDirHLSL}Sample.vert.spv: compileVS ${intDir}Sample.hlsl
    entryPoint = Sample
    
build ${dstDirHLSL}Sample.frag.spv: compilePS ${intDir}Sample.hlsl
    entryPoint = Sample
    
# could zip up files
        
build ${dstDirHLSL}Compute.comp.spv: compileCS ${intDir}Compute.hlsl
    entryPoint = Compute


